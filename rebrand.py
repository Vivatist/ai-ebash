#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ ai-ebash
"""

import os
import re
import shutil
from pathlib import Path
from typing import Dict, List

class ProjectRebranding:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, old_name: str, new_name: str, old_cmd: str, new_cmd: str):
        self.old_name = old_name  # ai-ebash
        self.new_name = new_name  # penguin-tamer
        self.old_package = old_name.replace('-', '_')  # ai_ebash
        self.new_package = new_name.replace('-', '_')  # penguin_tamer
        self.old_module = 'penguin_tamer'  # —Å—Ç–∞—Ä—ã–π –º–æ–¥—É–ª—å
        self.new_module = 'penguin_tamer'  # –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å penguin_tamer
        self.old_cmd = old_cmd  # ai
        self.new_cmd = new_cmd  # pt
        
    def get_files_to_update(self) -> List[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        files = []
        
        # Python —Ñ–∞–π–ª—ã
        for py_file in Path('.').rglob('*.py'):
            if 'venv' not in str(py_file) and '__pycache__' not in str(py_file):
                files.append(py_file)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        config_files = [
            'pyproject.toml',
            'setup.cfg', 
            'setup.py',
            'README.md',
            'MANIFEST.in',
            '.github/workflows/*.yml',
            '.github/workflows/*.yaml', 
            'debian/control',
            'debian/changelog',
        ]
        
        for pattern in config_files:
            files.extend(Path('.').glob(pattern))
            
        # JSON —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        for json_file in Path('.').rglob('*.json'):
            if 'locales' in str(json_file):
                files.append(json_file)
                
        return files
    
    def update_file_content(self, file_path: Path) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # –ó–∞–º–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_path.suffix == '.py':
                content = self._update_python_file(content)
            elif file_path.name == 'pyproject.toml':
                content = self._update_pyproject(content)
            elif file_path.name == 'setup.cfg':
                content = self._update_setup_cfg(content)
            elif file_path.name == 'README.md':
                content = self._update_readme(content)
            elif file_path.suffix in ['.yml', '.yaml']:
                content = self._update_github_actions(content)
            elif 'debian' in str(file_path):
                content = self._update_debian_files(content)
            else:
                content = self._update_generic_file(content)
            
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                return True
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")
            
        return False
    
    def _update_python_file(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Python —Ñ–∞–π–ª—ã"""
        # –ò–º–ø–æ—Ä—Ç—ã
        content = re.sub(r'\bfrom penguin_tamer\b', f'from {self.new_module}', content)
        content = re.sub(r'\bimport penguin_tamer\b', f'import {self.new_module}', content)
        
        # –ü—É—Ç–∏ –∫ –ø–∞–∫–µ—Ç–∞–º
        content = re.sub(r'\baiebash\b', self.new_module, content)
        
        return content
    
    def _update_pyproject(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç pyproject.toml"""
        content = re.sub(r'name = "ai-ebash"', f'name = "{self.new_name}"', content)
        content = re.sub(r'ai = "penguin_tamer.__main__:main"', f'{self.new_cmd} = "{self.new_module}.__main__:main"', content)
        content = re.sub(r'\baiebash\b', self.new_module, content)
        
        return content
    
    def _update_setup_cfg(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç setup.cfg"""
        content = re.sub(r'name = ai-ebash', f'name = {self.new_name}', content)
        content = re.sub(r'ai = penguin_tamer.__main__:main', f'{self.new_cmd} = {self.new_module}.__main__:main', content)
        content = re.sub(r'\baiebash\b', self.new_module, content)
        
        return content
        
    def _update_readme(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç README.md"""
        content = re.sub(r'\bai-ebash\b', self.new_name, content, flags=re.IGNORECASE)
        content = re.sub(r'\baiebash\b', self.new_module, content, flags=re.IGNORECASE)
        content = re.sub(r'`ai `', f'`{self.new_cmd} `', content)
        content = re.sub(r'`ai\b', f'`{self.new_cmd}', content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
        content = re.sub(r'Console utility for integrating artificial intelligence into a Linux terminal', 
                        'Penguin Tamer - AI-powered terminal assistant for Linux systems', content)
        content = re.sub(r'AI-eBash', 'Penguin Tamer', content)
        
        return content
        
    def _update_github_actions(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GitHub Actions"""
        content = re.sub(r'\bai-ebash\b', self.new_name, content)
        content = re.sub(r'\baiebash\b', self.new_module, content)
        
        return content
        
    def _update_debian_files(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Debian —Ñ–∞–π–ª—ã"""
        content = re.sub(r'\bai-ebash\b', self.new_name, content)
        content = re.sub(r'\baiebash\b', self.new_module, content)
        
        return content
        
    def _update_generic_file(self, content: str) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        content = re.sub(r'\bai-ebash\b', self.new_name, content)
        content = re.sub(r'\baiebash\b', self.new_module, content)
        
        return content
    
    def rename_directories(self) -> bool:
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        src_old = Path('src/penguin_tamer')
        src_new = Path(f'src/{self.new_module}')
        
        if src_old.exists():
            try:
                shutil.move(str(src_old), str(src_new))
                print(f"‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {src_old} ‚Üí {src_new}")
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
                return False
        return True
    
    def run_rebranding(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥: {self.old_name} ‚Üí {self.new_name}")
        print(f"üì¶ –ü–∞–∫–µ—Ç: {self.old_module} ‚Üí {self.new_module}")  
        print(f"‚ö° –ö–æ–º–∞–Ω–¥–∞: {self.old_cmd} ‚Üí {self.new_cmd}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        files = self.get_files_to_update()
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(files)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        updated_count = 0
        for file_path in files:
            if self.update_file_content(file_path):
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
                updated_count += 1
            
        print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {updated_count}")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        print("\nüìÅ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        self.rename_directories()
        
        print(f"\nüéâ –†–µ–±—Ä–µ–Ω–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–±–æ—Ä–∫—É –ø–∞–∫–µ—Ç–∞") 
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub")
        print("4. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–∞ PyPI –ø–æ–¥ –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥–∞"""
    print("ÔøΩ –°–∫—Ä–∏–ø—Ç —Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ ai-ebash ‚Üí Penguin Tamer")
    print("=" * 60)
    
    # –ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Penguin Tamer
    OLD_NAME = "ai-ebash"
    NEW_NAME = "penguin-tamer"
    OLD_CMD = "ai"
    NEW_CMD = "pt"
    
    print(f"üéØ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: Penguin Tamer")
    print(f"üì¶ PyPI –ø–∞–∫–µ—Ç: {NEW_NAME}")
    print(f"üêç Python –º–æ–¥—É–ª—å: penguin_tamer")
    print(f"‚ö° –ö–æ–º–∞–Ω–¥–∞: {NEW_CMD}")
    print(f"üêô GitHub repo: {NEW_NAME}")
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥ {OLD_NAME} ‚Üí {NEW_NAME}...")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_dir = f"backup_{OLD_NAME}"
    if not Path(backup_dir).exists():
        try:
            shutil.copytree('.', backup_dir, ignore=shutil.ignore_patterns('.git', '__pycache__', '*.pyc', 'venv', '.venv'))
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤: {backup_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥
    rebrander = ProjectRebranding(OLD_NAME, NEW_NAME, OLD_CMD, NEW_CMD)
    rebrander.run_rebranding()


if __name__ == "__main__":
    main()