#!/usr/bin/env python3
"""
–ù–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ai-ebash.

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ config.yaml –∏–∑ default_config.yaml –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
- –£–¥–æ–±–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
- –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ YAML —Ñ–æ—Ä–º–∞—Ç–∞
- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

# –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
from config_manager import config

# –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
current_llm = config.current_llm
temperature = config.temperature
user_content = config.user_content

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
config.temperature = 0.7
config.stream_mode = True
config.user_content = "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"

# –†–∞–±–æ—Ç–∞ —Å LLM
available_llms = config.get_available_llms()
current_config = config.get_current_llm_config()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π LLM
config.add_llm("My LLM", "gpt-4", "https://api.example.com/v1", "api-key")

# –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
config.reset_to_defaults()
"""

import yaml
import os
import shutil
from pathlib import Path
from typing import Dict, Any, Optional, List
from platformdirs import user_config_dir
from aiebash.i18n import detect_system_language


class ConfigError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    pass


class ConfigSections:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    GLOBAL = "global"
    LOGGING = "logging"
    SUPPORTED_LLMS = "supported_LLMs"


class GlobalKeys:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
    CURRENT_LLM = "current_LLM"
    USER_CONTENT = "user_content"
    TEMPERATURE = "temperature"
    STREAM_OUTPUT_MODE = "stream_output_mode"
    JSON_MODE = "json_mode"


class LoggingKeys:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π —Ä–∞–∑–¥–µ–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    CONSOLE_LEVEL = "console_level"
    FILE_ENABLED = "file_enabled"
    FILE_LEVEL = "file_level"


class ConfigManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ default_config.yaml,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π config.yaml –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """

    def __init__(self, app_name: str = "ai-ebash"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            app_name: –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.app_name = app_name
        self.user_config_dir = Path(user_config_dir(app_name))
        self.user_config_path = self.user_config_dir / "config.yaml"
        self._default_config_path = Path(__file__).parent / "default_config.yaml"

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.user_config_dir.mkdir(parents=True, exist_ok=True)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —à–∞–±–ª–æ–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self._ensure_config_exists()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._config = self._load_config()

    def _ensure_config_exists(self) -> None:
        """
        –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        –ï—Å–ª–∏ config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É–µ—Ç default_config.yaml.
        """
        if not self.user_config_path.exists():
            if self._default_config_path.exists():
                try:
                    shutil.copy2(self._default_config_path, self.user_config_path)
                    # After creating user config from defaults, set language based on system locale
                    try:
                        with open(self.user_config_path, 'r', encoding='utf-8') as f:
                            cfg = yaml.safe_load(f) or {}
                        sys_lang = detect_system_language(["en", "ru"]) or "en"
                        cfg["language"] = sys_lang
                        with open(self.user_config_path, 'w', encoding='utf-8') as f:
                            yaml.safe_dump(cfg, f, indent=2, allow_unicode=True, default_flow_style=False, sort_keys=False)
                    except Exception:
                        pass
                    print(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞: {self.user_config_path}")
                except Exception as e:
                    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            else:
                raise FileNotFoundError(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self._default_config_path}")

    def _load_config(self) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞.

        Returns:
            Dict[str, Any]: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        
        Raises:
            ConfigError: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            with open(self.user_config_path, 'r', encoding='utf-8') as f:
                config_data = yaml.safe_load(f)
                if config_data is None:
                    return {}
                if not isinstance(config_data, dict):
                    raise ConfigError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω {type(config_data)}")
                return config_data
        except FileNotFoundError:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.user_config_path}")
            return {}
        except yaml.YAMLError as e:
            raise ConfigError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}

    def _save_config(self) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ YAML —Ñ–∞–π–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.
        
        Raises:
            ConfigError: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        backup_path = self.user_config_path.with_suffix('.yaml.backup')
        if self.user_config_path.exists():
            try:
                shutil.copy2(self.user_config_path, backup_path)
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if not isinstance(self._config, dict):
                raise ConfigError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            
            with open(self.user_config_path, 'w', encoding='utf-8') as f:
                yaml.safe_dump(
                    self._config,
                    f,
                    indent=2,
                    allow_unicode=True,
                    default_flow_style=False,
                    sort_keys=False
                )
        except Exception as e:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if backup_path.exists():
                try:
                    shutil.copy2(backup_path, self.user_config_path)
                    print(f"üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                except Exception:
                    pass
            raise ConfigError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")

    def reload(self) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞.
        """
        self._config = self._load_config()

    def save(self) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª.
        """
        self._save_config()

    def get(self, section: str, key: str = None, default: Any = None) -> Any:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            section: –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'global', 'logging')
            key: –ö–ª—é—á –≤ —Å–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é —Å–µ–∫—Ü–∏—é)
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ default
        """
        section_data = self._config.get(section, {})

        if key is None:
            return section_data

        return section_data.get(key, default)

    def set(self, section: str, key: str, value: Any) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.

        Args:
            section: –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            key: –ö–ª—é—á –≤ —Å–µ–∫—Ü–∏–∏
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        Raises:
            ConfigError: –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        """
        if not isinstance(section, str) or not section.strip():
            raise ConfigError("–°–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(key, str) or not key.strip():
            raise ConfigError("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        
        if section not in self._config:
            self._config[section] = {}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π
        if section == ConfigSections.GLOBAL and key == GlobalKeys.TEMPERATURE:
            if not isinstance(value, (int, float)) or not (0 <= value <= 2):
                raise ConfigError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 2")
        
        self._config[section][key] = value
        self._save_config()

    def update_section(self, section: str, data: Dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å—é —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            section: –°–µ–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            data: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        """
        self._config[section] = data
        self._save_config()

    def get_all(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.

        Returns:
            Dict[str, Any]: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        return self._config.copy()

    # === –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ===

    @property
    def current_llm(self) -> str:
        """–¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è LLM."""
        return self.get("global", "current_LLM", "")

    @current_llm.setter
    def current_llm(self, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é LLM."""
        self.set("global", "current_LLM", value)

    @property
    def user_content(self) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö LLM."""
        return self.get("global", "user_content", "")

    @user_content.setter
    def user_content(self, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç."""
        self.set("global", "user_content", value)

    @property
    def temperature(self) -> float:
        """–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
        return self.get("global", "temperature", 0.2)

    @temperature.setter
    def temperature(self, value: float) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        self.set("global", "temperature", value)

    @property
    def stream_mode(self) -> bool:
        """–†–µ–∂–∏–º –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
        return self.get("global", "stream_output_mode", False)

    @stream_mode.setter
    def stream_mode(self, value: bool) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
        self.set("global", "stream_output_mode", value)

    @property
    def json_mode(self) -> bool:
        """JSON —Ä–µ–∂–∏–º."""
        return self.get("global", "json_mode", False)

    @json_mode.setter
    def json_mode(self, value: bool) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç JSON —Ä–µ–∂–∏–º."""
        self.set("global", "json_mode", value)

    @property
    def console_log_level(self) -> str:
        """–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å."""
        return self.get("logging", "console_level", "CRITICAL")

    @console_log_level.setter
    def console_log_level(self, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å."""
        self.set("logging", "console_level", value)

    @property
    def file_enabled(self) -> bool:
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        return self.get("logging", "file_enabled", False)

    @file_enabled.setter
    def file_enabled(self, value: bool) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        self.set("logging", "file_enabled", value)

    @property
    def file_log_level(self) -> str:
        """–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        return self.get("logging", "file_level", "DEBUG")

    @file_log_level.setter
    def file_log_level(self, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        self.set("logging", "file_level", value)

    def get_available_llms(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM.

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω LLM
        """
        supported_llms = self.get("supported_LLMs")
        if isinstance(supported_llms, dict):
            return list(supported_llms.keys())
        return []

    def get_llm_config(self, llm_name: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π LLM.

        Args:
            llm_name: –ò–º—è LLM

        Returns:
            Dict[str, Any]: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
        """
        supported_llms = self.get("supported_LLMs")
        if isinstance(supported_llms, dict):
            return supported_llms.get(llm_name, {})
        return {}

    def get_current_llm_config(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–π LLM.

        Returns:
            Dict[str, Any]: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π LLM
        """
        return self.get_llm_config(self.current_llm)

    def add_llm(self, name: str, model: str, api_url: str, api_key: str = "") -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é LLM.

        Args:
            name: –ò–º—è LLM
            model: –ú–æ–¥–µ–ª—å LLM
            api_url: API URL
            api_key: API –∫–ª—é—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        supported_llms = self.get("supported_LLMs") or {}

        if name in supported_llms:
            raise ValueError(f"LLM —Å –∏–º–µ–Ω–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        supported_llms[name] = {
            "model": model,
            "api_url": api_url,
            "api_key": api_key
        }

        self.set("supported_LLMs", name, supported_llms[name])

    def update_llm(self, name: str, model: str = None, api_url: str = None, api_key: str = None) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM.

        Args:
            name: –ò–º—è LLM –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            model: –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            api_url: –ù–æ–≤—ã–π API URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            api_key: –ù–æ–≤—ã–π API –∫–ª—é—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        supported_llms = self.get("supported_LLMs") or {}

        if name not in supported_llms:
            raise ValueError(f"LLM —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        current_config = supported_llms[name].copy()

        if model is not None:
            current_config["model"] = model
        if api_url is not None:
            current_config["api_url"] = api_url
        if api_key is not None:
            current_config["api_key"] = api_key

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é —Å–µ–∫—Ü–∏—é supported_LLMs
        supported_llms[name] = current_config
        self.update_section("supported_LLMs", supported_llms)

    def remove_llm(self, name: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç LLM.

        Args:
            name: –ò–º—è LLM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        if name == self.current_llm:
            raise ValueError("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é LLM")

        supported_llms = self.get("supported_LLMs") or {}

        if name not in supported_llms:
            raise ValueError(f"LLM —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        del supported_llms[name]
        self.update_section("supported_LLMs", supported_llms)

    def reset_to_defaults(self) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        if self._default_config_path.exists():
            shutil.copy2(self._default_config_path, self.user_config_path)
            self.reload()
        else:
            raise FileNotFoundError("–§–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω")

    @property
    def config_path(self) -> Path:
        """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return self.user_config_path

    @property
    def default_config_path(self) -> Path:
        """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        return self._default_config_path

    def validate_config(self) -> List[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º (–ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –≤—Å–µ –û–ö)
        """
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        temp = self.get(ConfigSections.GLOBAL, GlobalKeys.TEMPERATURE, 0.2)
        if not isinstance(temp, (int, float)) or not (0 <= temp <= 2):
            issues.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é LLM
        current_llm = self.get(ConfigSections.GLOBAL, GlobalKeys.CURRENT_LLM)
        if current_llm:
            available_llms = self.get_available_llms()
            if current_llm not in available_llms:
                issues.append(f"–¢–µ–∫—É—â–∞—è LLM '{current_llm}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        return issues
    
    def get_config_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        return {
            "config_path": str(self.user_config_path),
            "default_config_path": str(self._default_config_path),
            "config_exists": self.user_config_path.exists(),
            "default_exists": self._default_config_path.exists(),
            "config_size": self.user_config_path.stat().st_size if self.user_config_path.exists() else 0,
            "available_llms": len(self.get_available_llms()),
            "current_llm": self.current_llm,
            "validation_issues": self.validate_config()
        }
    
    def backup_config(self, backup_name: Optional[str] = None) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            backup_name: –ò–º—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å timestamp)
        
        Returns:
            Path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        """
        if backup_name is None:
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"config_backup_{timestamp}.yaml"
        
        backup_path = self.user_config_dir / backup_name
        
        if self.user_config_path.exists():
            shutil.copy2(self.user_config_path, backup_path)
        else:
            raise ConfigError("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        return backup_path
    
    def __repr__(self) -> str:
        return f"ConfigManager(app_name='{self.app_name}', config_path='{self.user_config_path}')"

    # === Language ===
    @property
    def language(self) -> str:
        """Current UI language (top-level key)."""
        try:
            return self._config.get("language", "en")
        except Exception:
            return "en"

    @language.setter
    def language(self, value: str) -> None:
        try:
            self._config["language"] = value
            self._save_config()
        except Exception:
            pass


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
config = ConfigManager()


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfigManager ===")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"–¢–µ–∫—É—â–∞—è LLM: {config.current_llm}")
    print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {config.temperature}")
    print(f"–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º: {config.stream_mode}")
    print(f"JSON —Ä–µ–∂–∏–º: {config.json_mode}")
    print(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.console_log_level}")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ LLM: {config.get_available_llms()}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–π LLM
    current_llm_config = config.get_current_llm_config()
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π LLM: {current_llm_config}")

    print("\n‚úÖ ConfigManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
